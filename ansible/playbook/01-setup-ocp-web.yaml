## ----------------------------------------------------------------------------
## ..:: ocp-web "installations" directory preparation ::..
## ----------------------------------------------------------------------------

## Installing ocp-web Server
- hosts: ocp_web
  remote_user: root
  vars:
    ##Â Get UDF SSH Key
    udf_access_public_key: "{{ lookup('file', '/home/ubuntu/.ssh/authorized_keys').split('\n')[0] }}"
    ocp_infra_public_key: "{{ lookup('file', '/home/ubuntu/.ssh/authorized_keys').split('\n')[1] }}"
  tasks:
    - name: Set timezone
      timezone:
        name: '{{ timezone }}'

    - name: Upgrading all packages to the latest version
      apt:
        update_cache: yes
        upgrade: dist

    - name: Remove resolv.conf link
      file:
        path: /etc/resolv.conf
        state: absent

    - name: change resolv.conf
      template:
        src: resolv-web.conf.j2
        dest: /etc/resolv.conf
        owner: root
        group: root
        mode: '0644'

    - name: Install GCC
      apt:
        pkg:
          - gcc

    ## Peparing "installations" directory
    - name: Create /usr/share/nginx/html/installations directory
      file:
        path: /usr/share/nginx/html/installations
        state: directory

    - name: Changing "html" nginx dir permissions
      shell: chmod -R g+srwx /usr/share/nginx/html/
      args:
        warn: false

    - name: download OCP related executables
      get_url:
        url: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp_release }}/openshift-install-linux-{{ ocp_release }}.tar.gz
        dest: /usr/share/nginx/html/installations

    - name: download OCP related executables
      get_url:
        url: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp_release }}/openshift-client-linux-{{ ocp_release }}.tar.gz
        dest: /usr/share/nginx/html/installations

    - name: download RHCOS related files
      get_url:
        url: https://mirror.openshift.com/pub/openshift-v4/dependencies/rhcos/{{ rhcos_branch }}/{{ rhcos_release }}/rhcos-{{ rhcos_release }}-x86_64-live-initramfs.x86_64.img
        dest: /usr/share/nginx/html/installations

    - name: download RHCOS related files
      get_url:
        url: https://mirror.openshift.com/pub/openshift-v4/dependencies/rhcos/{{ rhcos_branch }}/{{ rhcos_release }}/rhcos-{{ rhcos_release }}-x86_64-live-kernel-x86_64
        dest: /usr/share/nginx/html/installations

    - name: download RHCOS related files
      get_url:
        url: https://mirror.openshift.com/pub/openshift-v4/dependencies/rhcos/{{ rhcos_branch }}/{{ rhcos_release }}/rhcos-{{ rhcos_release }}-x86_64-live-rootfs.x86_64.img
        dest: /usr/share/nginx/html/installations

    - name: Unarchive linux OCP Client
      ansible.builtin.unarchive:
        src: /usr/share/nginx/html/installations/openshift-client-linux-{{ ocp_release }}.tar.gz
        dest: /usr/share/nginx/html/installations
        remote_src: yes

    - name: Unarchive linux OCP Installer
      ansible.builtin.unarchive:
        src: /usr/share/nginx/html/installations/openshift-install-linux-{{ ocp_release }}.tar.gz
        dest: /usr/share/nginx/html/installations
        remote_src: yes

    - name: Copy install-config.yaml file
      template:
        src: install-config.yaml.j2
        dest: /usr/share/nginx/html/installations/install-config.yaml

    - name: Copy install-config.yaml file (backup)
      template:
        src: install-config.yaml.j2
        dest: /usr/share/nginx/html/installations/install-config.yaml-backup

    - name: Openshift install preparation - Creating manifest files
      shell: /usr/share/nginx/html/installations/openshift-install create manifests --dir=/usr/share/nginx/html/installations/

    - name: Configuring masters as non schedulable
      replace:
        path: /usr/share/nginx/html/installations/manifests/cluster-scheduler-02-config.yml
        regexp: 'true'
        replace: 'false'

    - name: Openshift install preparation - Creating ignition files
      shell: /usr/share/nginx/html/installations/openshift-install create ignition-configs --dir=/usr/share/nginx/html/installations/

    - name: Openshift install preparation - Creating ignition files
      shell: chmod o+r /usr/share/nginx/html/installations/*

    - name: Copy source.rc for root
      copy:
        src: ocp-web/source.rc
        dest: /root

    - name: Creating .kube directory for root
      file:
        path: /root/.kube
        state: directory

    - name: Creating .kube directory for ubuntu
      file:
        owner: ubuntu
        path: /home/ubuntu/.kube
        state: directory

    - name: Copy kubeconfig file to .kube root directory
      copy:
        remote_src: yes
        src: /usr/share/nginx/html/installations/auth/kubeconfig
        dest: /root/.kube/config

    - name: Copy kubeconfig file to .kube ubuntu directory
      copy:
        remote_src: yes
        owner: ubuntu
        src: /usr/share/nginx/html/installations/auth/kubeconfig
        dest: /home/ubuntu/.kube/config

    - name: Copy oc binary to /usr/local/bin
      copy:
        remote_src: yes
        src: /usr/share/nginx/html/installations/oc
        dest: /usr/local/bin
        mode: 0755

    ## TELEGRAF
    - name: Adding influx apt-key
      apt_key:
        url: https://repos.influxdata.com/influxdb.key
        state: present

    - name: Adding Influx apt reporisotries
      shell: echo "deb https://repos.influxdata.com/ubuntu `lsb_release -cs` stable\n" > /etc/apt/sources.list.d/influxdb.list

    - name: Upgrading all packages to the latest version
      apt:
        update_cache: yes
        upgrade: dist

    - name: Installing Telegraf
      apt:
        pkg:
          - telegraf

    - name: Copying Telegraf configuration file
      template:
        src: telegraf.conf.j2
        dest: /etc/telegraf/telegraf.conf

    ## Staring Telegraf Agent
    - name: Restarting Telegraf agent
      service:
        name: telegraf
        state: restarted

    ## Installing NGINX OSS
    - name: 'install nginx'
      apt:
        name: ['nginx']
        state: latest

    - name: delete default nginx conf
      file:
        path: /etc/nginx/nginx.conf
        state: absent

    - name: copy nginx site.conf
      template:
        src: nginx.conf-initial.j2
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: '0644'
      notify: restart nginx

    ## Installing k9s
    - name: Downloading -brew- installation file
      get_url:
        url: https://raw.githubusercontent.com/Homebrew/install/master/install.sh
        dest: /home/ubuntu/install-k9s.sh
        mode: '0755'

    - name: Installing -brew-
      become: true
      become_user: ubuntu
      command: /bin/bash -c "echo'y' | /home/ubuntu/install-k9s.sh"
      args:
        chdir: /home/ubuntu/

    - name: Adding -brew- bin dir to PATH
      lineinfile:
        path: /home/ubuntu/.profile
        line: PATH="$PATH:/home/linuxbrew/.linuxbrew/bin"

    - name: Installing k9s through Brew Package manager
      become: true
      become_user: ubuntu
      homebrew:
        name: derailed/k9s/k9s
        state: present
      environment:
        PATH: '{{ ansible_env.PATH }}:/home/linuxbrew/.linuxbrew/bin'

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted
